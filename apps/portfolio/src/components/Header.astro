---
import { listIconPath } from '../icon-path.js';
import Button from './Button.astro';
import InternalLink from './InternalLink.astro';

export type { Props as HeaderProps };

interface Props {
  pageName: string;
}

const { pageName } = Astro.props;

const OPEN_NAV_BUTTON_ID = 'open-nav-button';
const NAV_ID = 'nav-menu';
---

<header class="sticky top-0 border-b bg-primary">
  <div data-expanded="true" class="flex items-center justify-between p-5">
    <span aria-hidden="true" class="font-mono text-[1.5rem]">
      <span class="text-primary">yeong-woo.</span>
      <span class="text-brand">{pageName}</span>
    </span>
    <Button
      id={OPEN_NAV_BUTTON_ID}
      aria-label="탐색 메뉴 열기"
      aria-expanded="false"
      aria-controls="nav-menu"
    >
      <svg width="32" height="32" fill="none" viewBox="0 0 48 48">
        <path fill="currentColor" d={listIconPath}></path>
      </svg>
    </Button>
  </div>

  <nav id={NAV_ID} class="hidden">
    <ul>
      <li>
        <InternalLink
          href="/"
          class="block p-6 text-[1.5rem] font-bold text-secondary"
        >
          홈
        </InternalLink>
      </li>
      <li>
        <InternalLink
          href="/works"
          class="block p-6 text-[1.5rem] font-bold text-secondary"
        >
          작업물
        </InternalLink>
      </li>
      <li>
        <a
          href="https://blog.yeongwoo.dev/"
          class="block p-6 text-[1.5rem] font-bold text-secondary"
        >
          블로그
        </a>
      </li>
    </ul>
  </nav>
</header>

<script>
  import { listIconPath, xIconPath } from '../icon-path.js';

  const OPEN_NAV_BUTTON_ID = 'open-nav-button';

  const openNavButtonEl = document.getElementById(OPEN_NAV_BUTTON_ID);
  if (!(openNavButtonEl instanceof HTMLButtonElement)) {
    throw new Error(`Can not find "${OPEN_NAV_BUTTON_ID}" element`);
  }
  const buttonIconPathEl = openNavButtonEl.getElementsByTagName('path').item(0);
  if (!(buttonIconPathEl instanceof SVGPathElement)) {
    throw new Error(
      `Can not find <path> child of "${OPEN_NAV_BUTTON_ID}" element`,
    );
  }

  const controlledId = openNavButtonEl.getAttribute('aria-controls');
  if (controlledId === null) {
    throw new Error(
      `There is no controlled element by "${OPEN_NAV_BUTTON_ID}"`,
    );
  }
  const navEl = document.getElementById(controlledId);
  if (!(navEl instanceof HTMLElement)) {
    throw new Error(
      `Can not find "${controlledId}" element that controlled by "${OPEN_NAV_BUTTON_ID}"`,
    );
  }

  openNavButtonEl.addEventListener('click', function () {
    const isAriaExpanded = this.ariaExpanded === 'true' ? true : false;

    if (isAriaExpanded) {
      navEl.classList.replace('block', 'hidden');
      buttonIconPathEl.setAttribute('d', listIconPath);
      this.ariaExpanded = 'false';
    } else {
      navEl.classList.replace('hidden', 'block');
      buttonIconPathEl.setAttribute('d', xIconPath);
      this.ariaExpanded = 'true';
    }
  });
</script>
